
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/earthdaily_simulated_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_earthdaily_simulated_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_earthdaily_simulated_dataset.py:


EarthDaily Simulated Dataset
=================================================================

Following a pivot field

.. GENERATED FROM PYTHON SOURCE LINES 8-10

Import librairies
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 10-19

.. code-block:: Python


    import earthdaily
    import datetime
    from dask.diagnostics import ProgressBar
    from matplotlib import pyplot as plt

    ProgressBar().register()  # to have chunks progress bar









.. GENERATED FROM PYTHON SOURCE LINES 20-22

Loading pivot
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: Python


    pivot = earthdaily.datasets.load_pivot_corumba()








.. GENERATED FROM PYTHON SOURCE LINES 26-28

Auth to earthdatastore
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: Python


    eds = earthdaily.earthdatastore.Auth()








.. GENERATED FROM PYTHON SOURCE LINES 32-34

Define timerange
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 34-38

.. code-block:: Python


    delta_days = 10
    datetime_list = ["2018-10-01", "2019-04-15"]








.. GENERATED FROM PYTHON SOURCE LINES 39-41

Request items for vnir dataset
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 41-51

.. code-block:: Python


    items = eds.search(
        "earthdaily-simulated-cloudless-l2a-cog-edagro",
        intersects=pivot,
        datetime=datetime_list,
        query={"instruments": {"contains": "vnir"}},
        prefer_alternate="download",
    )[::delta_days]  # an keep on item every n delta_days









.. GENERATED FROM PYTHON SOURCE LINES 52-54

Generate datacube for RGB and NIR
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: Python


    datacube = earthdaily.earthdatastore.datacube(
        items, intersects=pivot, assets=["blue", "green", "red", "nir"]
    ).load()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [                                        ] | 0% Completed | 166.79 us    [                                        ] | 0% Completed | 100.37 ms    [                                        ] | 0% Completed | 200.66 ms    [                                        ] | 0% Completed | 300.93 ms    [                                        ] | 0% Completed | 401.17 ms    [                                        ] | 0% Completed | 501.41 ms    [                                        ] | 1% Completed | 601.63 ms    [                                        ] | 1% Completed | 701.82 ms    [#                                       ] | 3% Completed | 801.96 ms    [##                                      ] | 5% Completed | 902.13 ms    [##                                      ] | 5% Completed | 1.00 s    [##                                      ] | 5% Completed | 1.10 s    [##                                      ] | 6% Completed | 1.20 s    [###                                     ] | 7% Completed | 1.30 s    [###                                     ] | 8% Completed | 1.40 s    [####                                    ] | 10% Completed | 1.50 s    [####                                    ] | 11% Completed | 1.60 s    [####                                    ] | 11% Completed | 1.70 s    [####                                    ] | 11% Completed | 1.80 s    [#####                                   ] | 12% Completed | 1.90 s    [#####                                   ] | 13% Completed | 2.01 s    [######                                  ] | 15% Completed | 2.11 s    [######                                  ] | 16% Completed | 2.21 s    [######                                  ] | 16% Completed | 2.31 s    [######                                  ] | 16% Completed | 2.41 s    [######                                  ] | 16% Completed | 2.51 s    [#######                                 ] | 17% Completed | 2.61 s    [#######                                 ] | 18% Completed | 2.71 s    [########                                ] | 21% Completed | 2.81 s    [########                                ] | 21% Completed | 2.91 s    [########                                ] | 21% Completed | 3.01 s    [########                                ] | 21% Completed | 3.11 s    [#########                               ] | 22% Completed | 3.21 s    [#########                               ] | 23% Completed | 3.31 s    [##########                              ] | 26% Completed | 3.41 s    [##########                              ] | 26% Completed | 3.51 s    [##########                              ] | 26% Completed | 3.61 s    [###########                             ] | 27% Completed | 3.71 s    [###########                             ] | 28% Completed | 3.81 s    [############                            ] | 30% Completed | 3.91 s    [############                            ] | 31% Completed | 4.01 s    [############                            ] | 31% Completed | 4.11 s    [#############                           ] | 32% Completed | 4.21 s    [#############                           ] | 33% Completed | 4.31 s    [#############                           ] | 33% Completed | 4.41 s    [##############                          ] | 35% Completed | 4.51 s    [##############                          ] | 36% Completed | 4.61 s    [##############                          ] | 36% Completed | 4.71 s    [###############                         ] | 37% Completed | 4.81 s    [###############                         ] | 38% Completed | 4.91 s    [###############                         ] | 38% Completed | 5.01 s    [###############                         ] | 38% Completed | 5.11 s    [################                        ] | 41% Completed | 5.21 s    [#################                       ] | 42% Completed | 5.31 s    [#################                       ] | 43% Completed | 5.41 s    [#################                       ] | 43% Completed | 5.51 s    [##################                      ] | 45% Completed | 5.61 s    [##################                      ] | 45% Completed | 5.71 s    [##################                      ] | 46% Completed | 5.81 s    [###################                     ] | 47% Completed | 5.91 s    [###################                     ] | 47% Completed | 6.01 s    [###################                     ] | 48% Completed | 6.11 s    [####################                    ] | 50% Completed | 6.21 s    [####################                    ] | 50% Completed | 6.31 s    [####################                    ] | 51% Completed | 6.41 s    [#####################                   ] | 52% Completed | 6.51 s    [#####################                   ] | 52% Completed | 6.61 s    [#####################                   ] | 53% Completed | 6.71 s    [#####################                   ] | 53% Completed | 6.82 s    [######################                  ] | 55% Completed | 6.92 s    [######################                  ] | 56% Completed | 7.02 s    [#######################                 ] | 57% Completed | 7.12 s    [#######################                 ] | 58% Completed | 7.22 s    [#######################                 ] | 58% Completed | 7.32 s    [#######################                 ] | 58% Completed | 7.42 s    [########################                ] | 60% Completed | 7.52 s    [########################                ] | 61% Completed | 7.62 s    [#########################               ] | 63% Completed | 7.72 s    [#########################               ] | 63% Completed | 7.82 s    [#########################               ] | 63% Completed | 7.92 s    [##########################              ] | 65% Completed | 8.02 s    [##########################              ] | 66% Completed | 8.12 s    [##########################              ] | 66% Completed | 8.22 s    [###########################             ] | 67% Completed | 8.32 s    [###########################             ] | 68% Completed | 8.42 s    [############################            ] | 70% Completed | 8.52 s    [############################            ] | 70% Completed | 8.62 s    [############################            ] | 71% Completed | 8.72 s    [#############################           ] | 72% Completed | 8.82 s    [#############################           ] | 73% Completed | 8.92 s    [#############################           ] | 73% Completed | 9.02 s    [##############################          ] | 75% Completed | 9.12 s    [##############################          ] | 76% Completed | 9.22 s    [##############################          ] | 76% Completed | 9.32 s    [###############################         ] | 78% Completed | 9.42 s    [###############################         ] | 78% Completed | 9.52 s    [################################        ] | 80% Completed | 9.62 s    [################################        ] | 80% Completed | 9.72 s    [################################        ] | 80% Completed | 9.82 s    [################################        ] | 81% Completed | 9.92 s    [#################################       ] | 83% Completed | 10.02 s    [#################################       ] | 83% Completed | 10.12 s    [##################################      ] | 85% Completed | 10.22 s    [##################################      ] | 85% Completed | 10.32 s    [##################################      ] | 85% Completed | 10.42 s    [##################################      ] | 86% Completed | 10.52 s    [###################################     ] | 88% Completed | 10.62 s    [####################################    ] | 90% Completed | 10.72 s    [####################################    ] | 90% Completed | 10.82 s    [####################################    ] | 90% Completed | 10.92 s    [####################################    ] | 91% Completed | 11.02 s    [####################################    ] | 91% Completed | 11.13 s    [######################################  ] | 95% Completed | 11.23 s    [######################################  ] | 95% Completed | 11.33 s    [######################################  ] | 95% Completed | 11.43 s    [######################################  ] | 95% Completed | 11.53 s    [######################################  ] | 96% Completed | 11.63 s    [####################################### ] | 97% Completed | 11.73 s    [####################################### ] | 98% Completed | 11.83 s    [########################################] | 100% Completed | 11.93 s




.. GENERATED FROM PYTHON SOURCE LINES 60-62

Plot RGB image time series
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: Python


    datacube[["red", "green", "blue"]].ed.plot_rgb(
        col="time", col_wrap=4, vmax=0.2
    )




.. image-sg:: /_auto_examples/images/sphx_glr_earthdaily_simulated_dataset_001.png
   :alt: time = 2018-10-01T10:42:14, time = 2018-10-11T10:42:14, time = 2018-10-21T10:42:14, time = 2018-10-31T10:42:14, time = 2018-11-10T10:42:14, time = 2018-11-20T10:42:14, time = 2018-11-30T10:42:14, time = 2018-12-10T10:42:14, time = 2018-12-20T10:42:14, time = 2018-12-30T10:42:14, time = 2019-01-09T10:42:14, time = 2019-01-19T10:42:14, time = 2019-01-29T10:42:14, time = 2019-02-08T10:42:14, time = 2019-02-18T10:42:14, time = 2019-02-28T10:42:14, time = 2019-03-10T10:42:14, time = 2019-03-20T10:42:14, time = 2019-03-30T10:42:14, time = 2019-04-09T10:42:14
   :srcset: /_auto_examples/images/sphx_glr_earthdaily_simulated_dataset_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <xarray.plot.facetgrid.FacetGrid object at 0x7f99892e59d0>



.. GENERATED FROM PYTHON SOURCE LINES 68-70

Plot mean RGB time series
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python


    datacube[["blue", "green", "red", "nir"]].groupby("time").mean(...).to_array(
        dim="band"
    ).plot(col="band")




.. image-sg:: /_auto_examples/images/sphx_glr_earthdaily_simulated_dataset_002.png
   :alt: band = blue, band = green, band = red, band = nir
   :srcset: /_auto_examples/images/sphx_glr_earthdaily_simulated_dataset_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <xarray.plot.facetgrid.FacetGrid object at 0x7f998851fe90>



.. GENERATED FROM PYTHON SOURCE LINES 76-78

Plot NDVI evolution
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 78-96

.. code-block:: Python


    datacube["ndvi"] = (datacube["nir"] - datacube["red"]) / (
        datacube["nir"] + datacube["red"]
    )

    fig, ax = plt.subplots()
    mean_ndvi = datacube[["ndvi"]].groupby("time").mean(...).to_array(dim="band")
    std_ndvi = datacube[["ndvi"]].groupby("time").std(...).to_array(dim="band")
    ax.fill_between(
        mean_ndvi.time,
        (mean_ndvi.values + std_ndvi.values)[0, ...],
        (mean_ndvi.values - std_ndvi.values)[0, ...],
        alpha=0.3,
        color="C1",
    )
    mean_ndvi.plot(ax=ax, c="C1")
    plt.grid(alpha=0.4)
    plt.title("NDVI evolution every 10 days")



.. image-sg:: /_auto_examples/images/sphx_glr_earthdaily_simulated_dataset_003.png
   :alt: NDVI evolution every 10 days
   :srcset: /_auto_examples/images/sphx_glr_earthdaily_simulated_dataset_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'NDVI evolution every 10 days')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 21.943 seconds)


.. _sphx_glr_download__auto_examples_earthdaily_simulated_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: earthdaily_simulated_dataset.ipynb <earthdaily_simulated_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: earthdaily_simulated_dataset.py <earthdaily_simulated_dataset.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
