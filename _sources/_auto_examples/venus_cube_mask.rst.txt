
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/venus_cube_mask.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__auto_examples_venus_cube_mask.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_venus_cube_mask.py:


Venus datacube
=================================================================

According to a theia location and max cloud cover, using earthdatastore.

.. GENERATED FROM PYTHON SOURCE LINES 8-10

Import librairies
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: Python


    from earthdaily import earthdatastore








.. GENERATED FROM PYTHON SOURCE LINES 14-16

Load credentials and init earthdatastore
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: Python


    eds = earthdatastore.Auth()








.. GENERATED FROM PYTHON SOURCE LINES 20-22

Set parameters
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 22-31

.. code-block:: Python

    collection = "venus-l2a"
    theia_location = "MEAD"
    max_cloud_cover = 20

    query = {
        "theia:location": {"eq": theia_location},
        "eo:cloud_cover": {"lt": max_cloud_cover},
    }








.. GENERATED FROM PYTHON SOURCE LINES 32-34

Search for items
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 37-39

Search for items
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: Python


    items = eds.search(collection, query=query, prefer_alternate="download", limit=5)








.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. note::
  We specify prefer_http="download" because we didn't set any s3 credentials.

.. GENERATED FROM PYTHON SOURCE LINES 45-49

.. code-block:: Python



    print(f"{theia_location} venus location has {len(items)} items.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MEAD venus location has 132 items.




.. GENERATED FROM PYTHON SOURCE LINES 50-52

Create the datacube and bandname mapping
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. note::
  As transform and other metadata are missing in assets,
  compute them for first asset

.. GENERATED FROM PYTHON SOURCE LINES 58-64

.. code-block:: Python


    epsg, resolution = (
        items[0].properties["proj:epsg"],
        items[0].properties["gsd"],
    )








.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. note::
  Instead of giving list of assets, you can provide a dict, with
  key as the asset you want, and the value as the name you want.

.. GENERATED FROM PYTHON SOURCE LINES 68-77

.. code-block:: Python



    venus_datacube = earthdatastore.datacube(
        items, assets=["blue", "green", "red"], epsg=epsg, resolution=resolution
    )
    print(venus_datacube)

    venus_datacube.isel(time=slice(29, 31), x=slice(4000, 4500), y=slice(4000, 4500)).ed.plot_rgb(vmax=0.2)




.. image-sg:: /_auto_examples/images/sphx_glr_venus_cube_mask_001.png
   :alt: time = 2018-10-16T17:38:28, time = 2018-10-18T17:38:31
   :srcset: /_auto_examples/images/sphx_glr_venus_cube_mask_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <xarray.Dataset>
    Dimensions:      (y: 10161, x: 9374, time: 132)
    Coordinates:
      * y            (y) float64 4.587e+06 4.587e+06 ... 4.536e+06 4.536e+06
      * x            (x) float64 6.915e+05 6.915e+05 ... 7.384e+05 7.384e+05
        spatial_ref  int32 32614
      * time         (time) datetime64[ns] 2017-11-30T17:34:06 ... 2020-10-29T17:...
    Data variables:
        blue         (time, y, x) float32 dask.array<chunksize=(1, 5792, 5792), meta=np.ndarray>
        green        (time, y, x) float32 dask.array<chunksize=(1, 5792, 5792), meta=np.ndarray>
        red          (time, y, x) float32 dask.array<chunksize=(1, 5792, 5792), meta=np.ndarray>

    <xarray.plot.facetgrid.FacetGrid object at 0x7f99872a3590>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.911 seconds)


.. _sphx_glr_download__auto_examples_venus_cube_mask.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: venus_cube_mask.ipynb <venus_cube_mask.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: venus_cube_mask.py <venus_cube_mask.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
